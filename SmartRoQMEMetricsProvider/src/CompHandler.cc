//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "CompHandler.hh"
#include "SmartRoQMEMetricsProvider.hh"

#include <iostream>

// include communication objects


void CompHandler::onStartup() 
{
	std::cout << "startup - put your startupCode in CompHandler::onStartup()!!!\n";

	CHS::StatusCode status;

	// Start all services. If you need manual control, use the content of this function to
	// connect and start each service individually, e.g:
	// COMP->connectMyPortName("SmartExampleComponent", "examplePort");
	//status = COMP->connectAndStartAllServices();
	if(COMP->getGlobalState().getConnections().getUseBase() == true){
		status = COMP->connectBaseBumperEventClient(COMP->connections.baseBumperEventClient.serverName, COMP->connections.baseBumperEventClient.serviceName);
		status = COMP->connectBaseStateClient(COMP->connections.baseStateClient.serverName, COMP->connections.baseStateClient.serviceName);

	}

	if(COMP->getGlobalState().getConnections().getUseKb() == true){
		status = COMP->connectKbEventClient(COMP->connections.kbEventClient.serverName, COMP->connections.kbEventClient.serviceName);
	}

	
	// Start all tasks. If you need manual control, use the content of this function to
	// start each task individually.
	COMP->startAllTasks();
	
	// Start all timers. If you need manual control, use the content of this function to
	// start each timer individually.
	COMP->startAllTimers();
	
	// Notify the component that setup/initialization is finished.
	// You may move this function to any other place.
	COMP->setStartupFinished(); 

	COMP->estimateReader = RoqmeEstimateReader(new EstimateListener());
}

void CompHandler::onShutdown() 
{
	std::cout << "shutdown - put your cleanup code in CompHandler::onShutdown()!!!\n";
	
}
