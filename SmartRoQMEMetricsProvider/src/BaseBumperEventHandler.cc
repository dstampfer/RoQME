//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "BaseBumperEventHandler.hh"
#include "SmartRoQMEMetricsProvider.hh"

#include <iostream>

void BaseBumperEventHandler::handleEvent(const CHS::EventId id, const CommBasicObjects::CommBumperEventResult &r) throw() 
{
	std::cout << "BaseBumperEventHandler event handler: event received: "<< r.getState() << std::endl;

	/*
	 * NOTE:
	 * This event handler should only be used handle the event data.
	 * It should not be used to process the data or to call ANY other blocking function.
	 * Blocking this handler would result in blocked component communication!
	 *
	 */
	try
	{
		RoqmeDDSTopics::RoqmeEnumContext enumContext;
		enumContext.name("BumpingEvent");

		CommBasicObjects::BumperEventType bumperState =  r.getState();
		if(bumperState == CommBasicObjects::BumperEventType::BUMPER_NOT_PRESSED)
		{
			enumContext.value().push_back("BUMPER_NOT_PRESSED");
		}
		else if(bumperState == CommBasicObjects::BumperEventType::BUMPER_PRESSED)
		{
			enumContext.value().push_back("BUMPER_PRESSED");
		}
		else if(bumperState == CommBasicObjects::BumperEventType::BUMPER_UNKNOWN)
		{
			enumContext.value().push_back("BUMPER_UNKNOWN");
		}
		else
		{
			enumContext.value().push_back("ENUM_VALUE_UNDEFINED");
		}

		enumWr.write(enumContext);
		std::cout << "bumperState context published!" << std::endl;
	}
	catch(Roqme::RoqmeDDSException& e)
	{
		std::cerr << e.what() << std::endl;
	}


	CHS::SmartGuard g(this->lock);
	this->curentRes = r;

}


CommBasicObjects::CommBumperEventResult BaseBumperEventHandler::getCurrentEventResult(){
	CHS::SmartGuard g(this->lock);
	return this->curentRes;
}
