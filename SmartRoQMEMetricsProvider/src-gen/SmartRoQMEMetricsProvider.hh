//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _SMARTROQMEMETRICSPROVIDER_HH
#define _SMARTROQMEMETRICSPROVIDER_HH
	
#include <iostream>
#include "smartSoft.hh"
#include "SmartRoQMEMetricsProviderCore.hh"
#include "SmartRoQMEMetricsProviderImpl.hh"

// include communication objects
#include <CommBasicObjects/CommBaseState.hh>
#include <CommBasicObjects/CommBumperEventParameter.hh>
#include <CommBasicObjects/CommBumperEventResult.hh>
#include <CommBasicObjects/CommKBEventParam.hh>
#include <CommBasicObjects/CommKBEventResult.hh>
#include <CommRoQMEObjects/CommQoSMetrics.hh>

// include tasks	
#include "MonitoringTask.hh"


// include handler
#include "CompHandler.hh"
#include "BaseBumperEventHandler.hh"
#include "KbEventHandler.hh"

#include "ParameterStateStruct.hh"
#include "ParameterUpdateHandler.hh"
#include "SmartStateChangeHandler.hh"

#define COMP SmartRoQMEMetricsProvider::instance()

class SmartRoQMEMetricsProvider : public SmartRoQMEMetricsProviderCore {
private:
	static SmartRoQMEMetricsProvider _smartRoQMEMetricsProvider;
	
	// constructor
	SmartRoQMEMetricsProvider();
	
	// copy-constructor
	SmartRoQMEMetricsProvider(const SmartRoQMEMetricsProvider& cc);
	
	// destructor
	~SmartRoQMEMetricsProvider() { };
	
	// load parameter from ini file
	void loadParameter(int argc, char* argv[]);
	
	// instantiate comp-handler
	CompHandler compHandler;
	
    // ThreadQueueHandler
    
public:
	// component
    SmartRoQMEMetricsProviderImpl *component;
    
	ParameterStateStruct getGlobalState() const
	{
		return paramHandler.getGlobalState();
	}
    
    // instantiate handler
	BaseBumperEventHandler *baseBumperEventHandler;
	KbEventHandler *kbEventHandler;
	ParamUpdateHandler paramHandler;
    
	// define tasks
	MonitoringTask *monitoringTask;


	
    // define ports
	CHS::EventClient<CommBasicObjects::CommBumperEventParameter,CommBasicObjects::CommBumperEventResult> *baseBumperEventClient;
	CHS::PushTimedClient<CommBasicObjects::CommBaseState> *baseStateClient;
	CHS::EventClient<CommBasicObjects::CommKBEventParam,CommBasicObjects::CommKBEventResult> *kbEventClient;
	CHS::PushNewestServer<CommRoQMEObjects::CommQoSMetrics> *metricsPushServer;
	CHS::ParameterSlave *smartParameterSlave;
	CHS::StateSlave *smartStateSlave;
	SmartStateChangeHandler *stateChangeHandler;
	CHS::WiringSlave *smartWiringSlave;
    
    void init(int argc, char *argv[]);
	void run();
	
	void setStartupFinished();
	CHS::StatusCode connectAndStartAllServices();
	void startAllTasks();
	void startAllTimers();
	
	CHS::StatusCode connectBaseBumperEventClient(const std::string &serverName, const std::string &serviceName);
	CHS::StatusCode connectBaseStateClient(const std::string &serverName, const std::string &serviceName);
	CHS::StatusCode connectKbEventClient(const std::string &serverName, const std::string &serviceName);
        
	// return singleton instance
    static SmartRoQMEMetricsProvider* instance()
    {
		return (SmartRoQMEMetricsProvider*)&_smartRoQMEMetricsProvider;
    }
    
			// connections parameter
			struct connections_struct
			{
			
				// component struct
				struct component_struct
				{
					// the name of the component
					std::string name;
				} component;
			
				//--- server port parameter ---
				struct MetricsPushServer_struct {
					std::string serviceName;
				} metricsPushServer;
	
				//--- client port parameter ---
				struct BaseBumperEventClient_struct {
					std::string serverName;
					std::string serviceName;
					std::string wiringName;
				} baseBumperEventClient;
				struct BaseStateClient_struct {
					std::string serverName;
					std::string serviceName;
					std::string wiringName;
					long interval;
				} baseStateClient;
				struct KbEventClient_struct {
					std::string serverName;
					std::string serviceName;
					std::string wiringName;
				} kbEventClient;
			} connections;
};
#endif
