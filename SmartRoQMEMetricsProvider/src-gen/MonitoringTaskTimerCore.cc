//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#include "MonitoringTaskTimerCore.hh"

#include "SmartRoQMEMetricsProvider.hh"

void MonitoringTaskTimerCore::timerExpired(const ACE_Time_Value & absolute_time,
			const void * arg)
{
	mutex.acquire();
	cond.signal();
	mutex.release();

	this->timerExpired(absolute_time);
}

void MonitoringTaskTimerCore::waitTimer()
{
	mutex.acquire();
	cond.wait();
	mutex.release();
}

void MonitoringTaskTimerCore::start()
{
	// create timer
	double fractpart, intpart;

	// setup MonitoringTaskTimerCore
	fractpart = modf(1.0, &intpart);
	timerId = COMP->component->getTimerThread().scheduleTimer(*this, (void*) 0, ACE_Time_Value(0,0),
                                  ACE_Time_Value(intpart, (int)(fractpart*1000*1000)));
}

void MonitoringTaskTimerCore::stop()
{
	COMP->component->getTimerThread().cancelTimer(timerId);
}
