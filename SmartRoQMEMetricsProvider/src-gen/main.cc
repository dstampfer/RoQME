//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include <iostream>
	
#ifdef ENABLE_BREAKPAD_LOGS
#include "client/linux/handler/exception_handler.h"
#include "common/linux/http_upload.h"
#include "smartComponentBreakpadCallback.hh"
#endif
	
#include "SmartRoQMEMetricsProvider.hh"
	
	
SmartRoQMEMetricsProvider SmartRoQMEMetricsProvider::_smartRoQMEMetricsProvider;
	
int main(int argc, char *argv[])
{
	std::cout << "main...\n";
	
	#ifdef ENABLE_BREAKPAD_LOGS
	std::string dumppath = "/tmp";
	if (argc < 2) {
		dumppath = "/tmp";
	        std::cerr << "[main] No command line option --breakbad_dump_path given using:"<< dumppath << std::endl;
	} else {
		for (int i = 1; i < argc; ++i) {
			if (std::string(argv[i]) == "--breakbad_dump_path") {
			    if (i + 1 < argc) { // Make sure we aren't at the end of argv!
				dumppath = argv[i+1]; // Increment 'i' so we don't get the argument as the next argv[i].
			    } else {
				  std::cerr << "[main] --breakbad_dump_path option requires one argument." << std::endl;
				return 1;
			    }  
			}
		}
         	std::cout<<"[main] breakpad_dump_path: "<< dumppath<<std::endl;
	}
	
	google_breakpad::MinidumpDescriptor descriptor(dumppath);
	google_breakpad::ExceptionHandler eh(descriptor, NULL, dumpCallback, NULL, true, -1);
	#endif
	
	SmartRoQMEMetricsProvider::instance()->init(argc, argv);
	SmartRoQMEMetricsProvider::instance()->run();
	std::cout << "... main() end. return 0." << std::endl;
	return 0;
}
