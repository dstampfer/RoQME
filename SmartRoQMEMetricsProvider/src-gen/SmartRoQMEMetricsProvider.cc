//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "SmartRoQMEMetricsProvider.hh"
	
// constructor
SmartRoQMEMetricsProvider::SmartRoQMEMetricsProvider()
{
	std::cout << "constructor of SmartRoQMEMetricsProvider\n";
	
	component = NULL;
	
	// set all pointer members to NULL
	monitoringTask = NULL;
	baseBumperEventClient = NULL;
	kbEventClient = NULL;
	baseStateClient = NULL;
	baseBumperEventHandler = NULL;
	kbEventHandler = NULL;
	stateChangeHandler = NULL;
	metricsPushServer = NULL;
	smartStateSlave = NULL;
	smartWiringSlave = NULL;
	smartParameterSlave = NULL;
	
	// set default ini parameter values
	connections.component.name = "SmartRoQMEMetricsProvider";

	connections.metricsPushServer.serviceName = "MetricsPushServer";
	connections.baseBumperEventClient.serverName = "SmartRobotinoBaseServer";
	connections.baseBumperEventClient.serviceName = "bumperEventServer";
	connections.kbEventClient.serverName = "SmartSimpleKB";
	connections.kbEventClient.serviceName = "kbEventServer";
	connections.baseStateClient.serverName = "SmartRobotinoBaseServer";
	connections.baseStateClient.serviceName = "basePositionServer";
	connections.baseStateClient.interval = 1;
}



/**
 * Notify the component that setup/initialization is finished.
 * You may call this function from anywhere in the component.
 *
 * Set component's internal lifecycle state automaton (if any) into 
 * Alive mode (from here on the component is ready to provide its services)
 */
void SmartRoQMEMetricsProvider::setStartupFinished() {
	smartStateSlave->setWaitState("Alive");
	std::cout << "Component initialization/startup finished." << std::endl;
}


CHS::StatusCode SmartRoQMEMetricsProvider::connectBaseBumperEventClient(const std::string &serverName, const std::string &serviceName) {
	CHS::StatusCode status;
	
	std::cout << "connecting to: " << serverName << "; " << serviceName << std::endl;
	status = baseBumperEventClient->connect(serverName, serviceName);
	while(status != CHS::SMART_OK)
	{
		ACE_OS::sleep(ACE_Time_Value(0,500000));
		status = COMP->baseBumperEventClient->connect(serverName, serviceName);
	}
	std::cout << "connected.\n";
	return status;
}
CHS::StatusCode SmartRoQMEMetricsProvider::connectBaseStateClient(const std::string &serverName, const std::string &serviceName) {
	CHS::StatusCode status;
	
	std::cout << "connecting to: " << serverName << "; " << serviceName << std::endl;
	status = baseStateClient->connect(serverName, serviceName);
	while(status != CHS::SMART_OK)
	{
		ACE_OS::sleep(ACE_Time_Value(0,500000));
		status = COMP->baseStateClient->connect(serverName, serviceName);
	}
	std::cout << "connected.\n";
	baseStateClient->subscribe(connections.baseStateClient.interval);
	return status;
}
CHS::StatusCode SmartRoQMEMetricsProvider::connectKbEventClient(const std::string &serverName, const std::string &serviceName) {
	CHS::StatusCode status;
	
	std::cout << "connecting to: " << serverName << "; " << serviceName << std::endl;
	status = kbEventClient->connect(serverName, serviceName);
	while(status != CHS::SMART_OK)
	{
		ACE_OS::sleep(ACE_Time_Value(0,500000));
		status = COMP->kbEventClient->connect(serverName, serviceName);
	}
	std::cout << "connected.\n";
	return status;
}


/**
 * First connect ALL client ports contained in this component, then start all services:
 * activate state, push, etc...
 */
CHS::StatusCode SmartRoQMEMetricsProvider::connectAndStartAllServices() {
	CHS::StatusCode status = CHS::SMART_OK;
	
	status = connectBaseBumperEventClient(connections.baseBumperEventClient.serverName, connections.baseBumperEventClient.serviceName);
	if(status != CHS::SMART_OK) return status;
	status = connectBaseStateClient(connections.baseStateClient.serverName, connections.baseStateClient.serviceName);
	if(status != CHS::SMART_OK) return status;
	status = connectKbEventClient(connections.kbEventClient.serverName, connections.kbEventClient.serviceName);
	if(status != CHS::SMART_OK) return status;

	
	return status;
}

/**
 * Start all tasks contained in this component.
 */
void SmartRoQMEMetricsProvider::startAllTasks() {
	// start task MonitoringTask
	monitoringTask->start();
}

/**
 * Start all timers contained in this component
 */
void SmartRoQMEMetricsProvider::startAllTimers() {
}



void SmartRoQMEMetricsProvider::init(int argc, char *argv[])
{
	try {
		CHS::StatusCode status;
		
		// load initial parameters from ini-file (if found)
		loadParameter(argc, argv);
		
		// print out the actual parameters which are used to initialize the component
		std::cout << " \nComponent Initial-Parameters:\n" << COMP->getGlobalState() << std::endl;
		// create new instance of the SmartSoft component
		component = new SmartRoQMEMetricsProviderImpl(connections.component.name, argc, argv);
		
		std::cout << "Component SmartRoQMEMetricsProvider is named " << connections.component.name << " Version: 1.0.0\n" << std::endl;
        
		// create ports
	    baseBumperEventHandler = new BaseBumperEventHandler();
	    baseBumperEventClient = new CHS::EventClient<CommBasicObjects::CommBumperEventParameter,CommBasicObjects::CommBumperEventResult>(component, *baseBumperEventHandler);
	    baseStateClient = new CHS::PushTimedClient<CommBasicObjects::CommBaseState>(component);
	    kbEventHandler = new KbEventHandler();
	    kbEventClient = new CHS::EventClient<CommBasicObjects::CommKBEventParam,CommBasicObjects::CommKBEventResult>(component, *kbEventHandler);
	    metricsPushServer = new CHS::PushNewestServer<CommRoQMEObjects::CommQoSMetrics>(component, connections.metricsPushServer.serviceName);
	    smartParameterSlave = new CHS::ParameterSlave(component, &paramHandler);
	    stateChangeHandler = new SmartStateChangeHandler();
	    smartStateSlave = new CHS::StateSlave(component, stateChangeHandler);
	    // define states
	    smartWiringSlave = new CHS::WiringSlave(component);
		
		// activate state slave
		status = smartStateSlave->activate();
		if(status != CHS::SMART_OK) std::cerr << "ERROR: activate state" << std::endl;
		
		// add client port to wiring slave
		baseBumperEventClient->add(smartWiringSlave, connections.baseBumperEventClient.wiringName);
		baseStateClient->add(smartWiringSlave, connections.baseStateClient.wiringName);
		kbEventClient->add(smartWiringSlave, connections.kbEventClient.wiringName);
		
		// create tasks and timers
		monitoringTask = new MonitoringTask(component);

	} catch (const std::exception &ex) {
		std::cerr << "Uncaught std exception" << ex.what() << std::endl;
	} catch (...) {
		std::cerr << "Uncaught exception" << std::endl;
	}
}

// run the component
void SmartRoQMEMetricsProvider::run()
{
	compHandler.onStartup();
	
	// coponent will now start running and will continue (block in the run method) until it is commanded to shutdown (i.e. by a SIGINT signal)
	component->run();
	// component was signalled to shutdown
	// 1) signall all tasks to shutdown as well (and give them 2 seconds time to cooperate)
	// if time exceeds, component is killed without further clean-up
	component->closeAllAssociatedTasks(2);
	
	compHandler.onShutdown();
	
	// destroy all task instances
	delete monitoringTask;

	// now clean-up all communication ports
	// delete all client ports
	delete baseBumperEventClient;
	delete kbEventClient;
	delete baseStateClient;
	// delete all ThreadQueueHandler
	// delete all other handlers
	delete baseBumperEventHandler;
	delete kbEventHandler;
	// delete state-change-handler
	delete stateChangeHandler;
	// delete all server ports
	delete metricsPushServer;
	// delete all master/slave ports
	delete smartStateSlave;
	delete smartWiringSlave;
	delete smartParameterSlave;

	// clean-up components internally used resources (internally used communication middleware) 
	component->cleanUpComponentResources();
	
	// finally delete the component itself
	delete component;
}

void SmartRoQMEMetricsProvider::loadParameter(int argc, char *argv[])
{
	/*
	 Parameters can be specified via command line --filename=<filename> or -f <filename>

	 With this parameter present:
	   - The component will look for the file in the current working directory,
	     a path relative to the current directory or any absolute path
	   - The component will use the default values if the file cannot be found

	 With this parameter absent:
	   - <Name of Component>.ini will be read from current working directory, if found there
	   - $SMART_ROOT/etc/<Name of Component>.ini will be read otherwise
	   - Default values will be used if neither found in working directory or /etc
	 */
	CHS::SmartIniParameter parameter;
	std::ifstream parameterfile;
	bool parameterFileFound = false;

	// load parameters
	try
	{
		// if paramfile is given as argument
		if(parameter.tryAddFileFromArgs(argc,argv,"filename", 'f'))
		{
			parameterFileFound = true;
			std::cout << "parameter file is loaded from an argv argument \n";
		} else if(parameter.searchFile("SmartRoQMEMetricsProvider.ini", parameterfile)) {
			parameterFileFound = true;
			std::cout << "load SmartRoQMEMetricsProvider.ini parameter file\n";
			parameter.addFile(parameterfile);
		} else {
			std::cout << "WARNING: SmartRoQMEMetricsProvider.ini parameter file not found! (using default values or command line arguments)\n";
		}
		
		// add command line arguments to allow overwriting of parameters
		// from file
		parameter.addCommandLineArgs(argc,argv,"component");
		
		// initialize the naming service using the command line parameters parsed in the
		// SmartIniParameter class. The naming service parameters are expected to be in
		// the "component" parameter group.
		Smart::NAMING::instance()->checkForHelpArg(argc,argv);
		if(parameterFileFound) 
		{
			if(Smart::NAMING::instance()->init(parameter.getAllParametersFromGroup("component")) != 0) {
				// initialization of naming service failed
				throw std::logic_error( "<NamingService> Service initialization failed!\nPossible causes could be:\n-> Erroneous configuration.\n-> Naming service not reachable.\n" );
			}
		} else {
			if(Smart::NAMING::instance()->init(argc, argv) != 0) {
				// initialization of naming service failed
				throw std::logic_error( "<NamingService> Service initialization failed!\nPossible causes could be:\n-> Erroneous configuration.\n-> Naming service not reachable.\n" );
			}
		}
			
		// print all known parameters
		// parameter.print();
		
		//--- server port // client port // other parameter ---
		// load parameter
		parameter.getString("component", "name", connections.component.name);
		
		parameter.getString("baseBumperEventClient", "serviceName", connections.baseBumperEventClient.serviceName);
		parameter.getString("baseBumperEventClient", "serverName", connections.baseBumperEventClient.serverName);
		parameter.getString("baseBumperEventClient", "wiringName", connections.baseBumperEventClient.wiringName);
		parameter.getInteger("baseStateClient", "interval", connections.baseStateClient.interval);
		parameter.getString("baseStateClient", "serviceName", connections.baseStateClient.serviceName);
		parameter.getString("baseStateClient", "serverName", connections.baseStateClient.serverName);
		parameter.getString("baseStateClient", "wiringName", connections.baseStateClient.wiringName);
		parameter.getString("kbEventClient", "serviceName", connections.kbEventClient.serviceName);
		parameter.getString("kbEventClient", "serverName", connections.kbEventClient.serverName);
		parameter.getString("kbEventClient", "wiringName", connections.kbEventClient.wiringName);
		parameter.getString("metricsPushServer", "serviceName", connections.metricsPushServer.serviceName);
		
		paramHandler.loadParameter(parameter);
	
	} catch (const CHS::IniParameterError & e) {
		std::cerr << e.what() << std::endl;
	} catch (const std::exception &ex) {
		std::cerr << "Uncaught std::exception: " << ex.what() << std::endl;
	} catch (...) {
		std::cerr << "Uncaught exception" << std::endl;
	}
}
